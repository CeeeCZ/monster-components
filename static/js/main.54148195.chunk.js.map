{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","useState","setMonsters","filteredMonsters","setFilteredMonsters","searchField","setSearchField","axios","get","then","response","data","useEffect","filter","toLowerCase","includes","e","target","value","search","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAGaA,EAAO,SAACC,GACjB,OACA,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJbC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNtBM,G,MAAY,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACrC,OACI,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAWF,MCHVG,EAAM,WAAO,IAAD,EACSC,qBADT,mBAChBR,EADgB,KACNS,EADM,OAEyBD,mBAAS,IAFlC,mBAEhBE,EAFgB,KAEEC,EAFF,OAGeH,mBAAS,IAHxB,mBAGhBI,EAHgB,KAGHC,EAHG,KAgBvB,OAXAC,IAAMC,IAAI,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIR,EAAYQ,EAASC,SAE9FC,qBAAU,WACJnB,GACFW,EAAoBX,EAASoB,QAAO,SAAAzB,GAClC,OAAOA,EAAQE,KAAKwB,cAAcC,SAASV,EAAYS,qBAG1D,CAACrB,EAAUY,IAIZ,mCACA,sBAAKpB,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAc,SAACmB,GAAD,OAAOV,EAAeU,EAAEC,OAAOC,UACnFf,GACC,cAAC,EAAD,CAAUV,SAAUU,EAAkBgB,OAAQd,UChBvCe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.54148195.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\nexport const Card = (props) => {\n    return (\n    <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h1>{props.monster.name}</h1>\n        <p>{props.monster.email}</p>\n    </div>\n    )\n}","import React from 'react';\nimport './card-list.styles.css'\nimport { Card } from '../card/card.component'\n\nexport const CardList = (props) => {\n    return(\n        <div className=\"card-list\">\n        {\n            props.monsters.map(monster => (\n                <Card key={monster.id} monster={monster} />\n            ))\n            \n        }\n        </div>\n    );\n};","import React from 'react';\nimport './search-box.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange}) => {\n    return (\n        <input \n            className='search'\n            type=\"search\"\n            placeholder={ placeholder }\n            onChange={ handleChange }\n        />\n    );\n};","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport { CardList } from './components/card-list/card-list.component.jsx'\nimport { SearchBox } from './components/search-box/search-box.component.jsx'\n\nexport const App = () => {\n  const [monsters, setMonsters] = useState();\n  const [filteredMonsters, setFilteredMonsters] = useState([]);\n  const [searchField, setSearchField] = useState(\"\");\n\n  axios.get(\"https://jsonplaceholder.typicode.com/users\").then(response => setMonsters(response.data));\n\n  useEffect(() => {\n    if (monsters) {\n      setFilteredMonsters(monsters.filter(monster => {\n        return monster.name.toLowerCase().includes(searchField.toLowerCase())\n      }))\n    }\n  }, [monsters, searchField])\n  \n\n  return (\n    <>\n    <div className=\"App\">\n    <h1>Monsters Rolodex</h1>\n    <SearchBox placeholder=\"search monsters\" handleChange={(e) => setSearchField(e.target.value)}/>\n      {filteredMonsters && (\n        <CardList monsters={filteredMonsters} search={searchField}>\n    \n        </CardList>\n      )}\n    </div>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}